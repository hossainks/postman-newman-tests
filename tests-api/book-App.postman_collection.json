{
	"info": {
		"_postman_id": "b4b8c249-9d0d-48c2-bd33-32f72ebe79db",
		"name": "Book-App Auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8803168",
		"_collection_link": "https://blue-rocket-989944.postman.co/workspace/localhost~6f7db2a8-7f7d-4f6c-8400-0200e9caf65a/collection/8803168-b4b8c249-9d0d-48c2-bd33-32f72ebe79db?action=share&source=collection_link&creator=8803168"
	},
	"item": [
		{
			"name": "Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for Health Endpoint\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const res = pm.response.json();",
							"pm.test(\"Helath Endpind Response is Ok\", function () {",
							"    pm.expect(res.Status).to.equal('OK');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{Baseurl}}/health",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 for user registration\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const res = pm.response.json();",
							"pm.test(\"User registered successfully\", function () {",
							"    pm.expect(res.message).to.equal('User registered successfully');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testUser1\",\r\n    \"password\": \"testPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/auth/register",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for successful login\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const res = pm.response.json();",
							"pm.collectionVariables.set(\"token\", res.token);",
							"",
							"pm.test(\"Body should contain token\", function () {",
							"    pm.expect(res).to.have.property('token');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"testUser\",\r\n    \"password\": \"testPass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/auth/login",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create All Books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let adjectives = [\"Silent\", \"Dark\", \"Bright\", \"Lost\", \"Brave\", \"Forgotten\", \"Golden\"];\r",
							"let nouns = [\"River\", \"Forest\", \"Dream\", \"Shadow\", \"Journey\", \"Empire\", \"Secret\"];\r",
							"\r",
							"let title = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r",
							"pm.collectionVariables.set(\"bookName\", title);\r",
							"\r",
							"let year = Math.floor(Math.random() * (2025 - 1900 + 1)) + 1900;\r",
							"pm.collectionVariables.set(\"year\",year)\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 for created resource\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"// Test the response body structure\r",
							"pm.test(\"Response includes required properties\", function () {\r",
							"    pm.expect(res).to.have.property('title');\r",
							"    pm.expect(res).to.have.property('author');\r",
							"    pm.expect(res).to.have.property('year');\r",
							"    pm.expect(res).to.have.property('_id');\r",
							"    pm.expect(res).to.have.property('__v');\r",
							"});\r",
							"\r",
							"pm.test(\"Response must have the expected title\", function () {\r",
							"    pm.expect(res.title).to.equal(pm.collectionVariables.get(\"bookName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response must have the expected year\", function () {\r",
							"    pm.expect(res.year).to.equal(pm.collectionVariables.get(\"year\"));\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"bookId\", res._id);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{bookName}}\",\n    \"author\": \"{{$randomFullName}}\",\n    \"year\": {{year}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/books",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for all books\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const res = pm.response.json();",
							"// Test the response body structure",
							"pm.test(\"Response includes required properties\", function () {",
							"    pm.expect(res).to.be.an('array');",
							"    pm.expect(res[0]).to.have.property('title');",
							"    pm.expect(res[0]).to.have.property('author');",
							"    pm.expect(res[0]).to.have.property('year');",
							"    pm.expect(res[0]).to.have.property('_id');",
							"    pm.expect(res[0]).to.have.property('__v');",
							"});",
							"",
							"const randomBook = res[Math.floor(Math.random() * res.length)]",
							"",
							"// Test the response body values",
							"pm.test(\"Random Book Must have the Title property\", function () {",
							"    pm.expect(randomBook).to.have.property('title');",
							"});",
							"",
							"pm.test(\"Random Book Must have the author property\", function () {",
							"   pm.expect(randomBook).to.have.property('author');",
							"});",
							"",
							"pm.test(\"Random Book Must have the year property\", function () {",
							"   pm.expect(randomBook).to.have.property('year');",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{Baseurl}}/api/books",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Books By  ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for successful request of a book\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const res = pm.response.json();\r",
							"// Test the response body structure\r",
							"pm.test(\"Response includes required properties\", function () {\r",
							"    pm.expect(res).to.be.an('object');\r",
							"    pm.expect(res).to.have.property('title');\r",
							"    pm.expect(res).to.have.property('author');\r",
							"    pm.expect(res).to.have.property('year');\r",
							"    pm.expect(res).to.have.property('_id');\r",
							"    pm.expect(res).to.have.property('__v');\r",
							"});\r",
							"\r",
							"pm.test(\"Random Book Must have the author property\", function () {\r",
							"   pm.expect(res).to.have.property('author');\r",
							"});\r",
							"\r",
							"pm.test(\"Response have the expected title\", function () {\r",
							"    pm.expect(res.title).to.equal(pm.collectionVariables.get(\"bookName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response have the expected year\", function () {\r",
							"    pm.expect(res.year).to.equal(pm.collectionVariables.get(\"year\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Books By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for PUT request\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const res = pm.response.json();\r",
							"// Test the response body structure\r",
							"pm.test(\"Response includes required properties\", function () {\r",
							"    pm.expect(res).to.be.an('object');\r",
							"    pm.expect(res).to.have.property('title');\r",
							"    pm.expect(res).to.have.property('author');\r",
							"    pm.expect(res).to.have.property('year');\r",
							"    pm.expect(res).to.have.property('_id');\r",
							"    pm.expect(res).to.have.property('__v');\r",
							"});\r",
							"\r",
							"pm.test(\"Response have the Updated title\", function () {\r",
							"    pm.expect(res.title).to.equal(\"Robert Updated\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response have the Updated author\", function () {\r",
							"    pm.expect(res.author).to.equal(\"Robert C. Martin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response have the Updated year\", function () {\r",
							"    pm.expect(res.year).to.equal(2010);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Robert Updated\",\n    \"author\": \"Robert C. Martin\",\n    \"year\": 2010\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong Book ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for a non-existent book\", function () { \r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"const res = pm.response.json();\r",
							"\r",
							"// Test the response body structure\r",
							"pm.test(\"Check if the response body contains the correct message for a non-existent book\", function () { \r",
							"    pm.expect(res.message).to.equal('Book not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/books/68c7db3a9b7c4cdcbe332cf2",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books",
						"68c7db3a9b7c4cdcbe332cf2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for book deletion\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"pm.test(\"Check book is deleted successfully with proper message\", function () {\r",
							"    pm.expect(res.message).to.equal('Book deleted successfully');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{Baseurl}}/api/books/{{bookId}}",
					"protocol": "http",
					"host": [
						"{{Baseurl}}"
					],
					"path": [
						"api",
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Baseurl",
			"value": "localhost:3000"
		},
		{
			"key": "bookName",
			"value": ""
		},
		{
			"key": "year",
			"value": ""
		},
		{
			"key": "bookId",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}